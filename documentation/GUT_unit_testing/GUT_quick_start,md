## Creating Tests

Much more information is available in the Creating Tests document, but here are some basics:

All test scripts must extend `GutTest` (`res://addons/gut/test.gd`) script supplied by GUT.

```gdscript
extends GutTest
```

By default, all test files must begin with `test_` to be found by GUT. You can change the prefix and suffix of test files in the GUT settings.

There is a plethora of asserts and helpers that are listed here.

### Setup and Teardown Methods:

- `before_all`
- `before_each`
- `after_each`
- `after_all`

Any method that starts with `test` will be run as a test.

```gdscript
extends GutTest

func before_all():
    gut.p("Runs once before all tests")

func before_each():
    gut.p("Runs before each test.")

func after_each():
    gut.p("Runs after each test.")

func after_all():
    gut.p("Runs once after all tests")

func test_assert_eq_number_not_equal():
    assert_eq(1, 2, "Should fail.  1 != 2")

func test_assert_eq_number_equal():
    assert_eq("asdf", "asdf", "Should pass")
```

You can use inner classes to group tests together. The class name must start with `Test` and extend `test.gd`.

```gdscript
extends GutTest

class TestSomeAspects:
    extends GutTest

    func test_assert_eq_number_not_equal():
        assert_eq(1, 2, "Should fail.  1 != 2")

    func test_assert_eq_number_equal():
        assert_eq("asdf", "asdf", "Should pass")

class TestOtherAspects:
    extends GutTest

    func test_assert_true_with_true():
        assert_true(true, "Should pass, true is true")
```

## Doubles/Spies/Stubs

[More Information: Doubles, Spies, Stubs]

You can make a double of just about anything. `double` returns a loaded class/scene, not an instance. Doubles extend the object to be doubled and have empty implementations for all methods defined in the script or parent scripts, but not parent Godot methods that are not overridden.

```gdscript
var Foo = load("res://foo.gd")
var MyScene = load("res://my_scene.tscn")

var double_foo = double(Foo).new()
var double_scene = double(MyScene).instantiate()
```

You can stub your double to do different things. Unstubbed methods that are called generate log messages.

```gdscript
var double_foo = double(Foo).new()
stub(double_foo.bar).to_return(42)
stub(double_foo, "something").to_call_super() # do what method would normally do
stub(double_foo.other_thing).to_return(77).when_passed(1, 2, "c")
stub(double_foo.other_thing.bind(4, 5, "z")).to_do_nothing()
```

You can spy on your doubles with various asserts and helpers.

```gdscript
var double_foo = double(Foo).new()

assert_called(double_foo, "bar")
assert_not_called(double_foo, "something")
assert_call_count(double_foo, "call_me", 10)
assert_called(double_foo, "other_thing", [1, 2, "c"])

var called_with_last = get_call_parameters(double_foo, "call_me")
var called_with_4 = get_call_parameters(double_foo, "call_me", 4)
```

## Partial Doubles

[More Information]

Partial doubles have all the same properties of a double except they retain the source functionality by default. You can stub and spy on them just like a double, but anything not stubbed will behave as if it wasnâ€™t a double.

```gdscript
var double_bar = partial_double(Bar).instance()
stub(double_bar.foo).to_do_nothing()
stub(double_bar.something).to_return(27).when_passed(32)
assert_called(double_bar, "other_thing")
```

## Parameterized Tests

[More Information]

You can create tests that will be run multiple times and be passed multiple values.

- The test must have one and only one parameter.
- That parameter must be defaulted to call `use_parameters`.
- The value passed to `use_parameters` must be an array.

```gdscript
var test_params = [[1, 2, 3], [4, 5, 6]]
func test_with_parameters(p=use_parameters(test_params)):
    assert_eq(p[0], p[2] - p[1])

var named_params = ParameterFactory.named_parameters(["a", "b"], [[1, 2], ["one", "two"]])
func test_with_named_params(p=use_parameters(named_params)):
    assert_ne(p.a, p.b)
```

## Await

[More Information]

You can use `await` in your tests to allow time to pass before making assertions.

```gdscript
await wait_seconds(10)

var my_obj = load("res://my_obj.gd").new()
await wait_for_signal(my_obj.some_signal, 3)
await wait_frames(5)
```

## Leak Testing and Memory Management

[More Information]

Call `autofree` or `autoqfree` on anything you want to be automatically freed up after your test.

```gdscript
var my_node = autofree(Node.new())
var my_node_q = add_child_autofree(Node2D.new())
```

Orphan counts are displayed after each test/script that generates orphans and at the end of the run. You can disable this feature if needed.

```gdscript
func test_freeing():
    var node = Node.new()
    assert_no_new_orphans("this one fails")
    node.free()
    assert_no_new_orphans('this one passes')

func test_queue_freeing():
    var node = Node.new()
    node.queue_free()
    assert_no_new_orphans('this one fails')
    await wait_seconds(.1)
    assert_no_new_orphans('this one passes')
